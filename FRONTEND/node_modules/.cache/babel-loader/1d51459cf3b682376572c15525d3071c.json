{"ast":null,"code":"var _jsxFileName = \"C:\\\\team20project\\\\frontend\\\\src\\\\containers\\\\TableSample.js\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport _ from \"lodash\";\nimport { makeData } from \"./Utils.js\"; // Import React Table\n\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\nconst rawData = makeData();\n\nconst requestData = (pageSize, page, sorted, filtered) => {\n  return new Promise((resolve, reject) => {\n    // You can retrieve your data however you want, in this case, we will just use some local data.\n    let filteredData = rawData; // You can use the filters in your request, but you are responsible for applying them.\n\n    if (filtered.length) {\n      filteredData = filtered.reduce((filteredSoFar, nextFilter) => {\n        return filteredSoFar.filter(row => {\n          return (row[nextFilter.id] + \"\").includes(nextFilter.value);\n        });\n      }, filteredData);\n    } // You can also use the sorting in your request, but again, you are responsible for applying it.\n\n\n    const sortedData = _.orderBy(filteredData, sorted.map(sort => {\n      return row => {\n        if (row[sort.id] === null || row[sort.id] === undefined) {\n          return -Infinity;\n        }\n\n        return typeof row[sort.id] === \"string\" ? row[sort.id].toLowerCase() : row[sort.id];\n      };\n    }), sorted.map(d => d.desc ? \"desc\" : \"asc\")); // You must return an object containing the rows of the current page, and optionally the total pages number.\n\n\n    const res = {\n      rows: filteredData.slice(pageSize * page, pageSize * page + pageSize),\n      pages: Math.ceil(filteredData.length / pageSize)\n    }; // Here we'll simulate a server response with 500ms of delay.\n\n    setTimeout(() => resolve(res), 500);\n  });\n};\n\nexport default class TableSample extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n      pages: null,\n      loading: true\n    };\n    this.fetchData = this.fetchData.bind(this);\n  }\n\n  fetchData(state, instance) {\n    // Whenever the table model changes, or the user sorts or changes pages, this method gets called and passed the current table model.\n    // You can set the `loading` prop of the table to true to use the built-in one or show you're own loading bar if you want.\n    this.setState({\n      loading: true\n    }); // Request the data however you want.  Here, we'll use our mocked service we created earlier\n\n    requestData(state.pageSize, state.page, state.sorted, state.filtered).then(res => {\n      console.log(res); // Now just get the rows of data to your React Table (and update anything else like total pages or loading)\n\n      this.setState({\n        data: res.rows,\n        pages: res.pages,\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          data = _this$state.data,\n          pages = _this$state.pages,\n          loading = _this$state.loading;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(ReactTable, {\n      columns: [{\n        Header: \"First Name\",\n        accessor: \"firstName\"\n      }, {\n        Header: \"Last Name\",\n        accessor: \"lastName\"\n      }, {\n        Header: \"Age\",\n        accessor: \"age\"\n      }],\n      manual: true // Forces table not to paginate or sort automatically, so we can handle it server-side\n      ,\n      data: data,\n      pages: pages // Display the total number of pages\n      ,\n      loading: loading // Display the loading overlay when we need it\n      ,\n      onFetchData: this.fetchData // Request new data when things change\n      ,\n      filterable: true,\n      defaultPageSize: 10,\n      className: \"-striped -highlight\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }));\n  }\n\n} // render(<TableSample />, document.getElementById(\"root\"));","map":{"version":3,"sources":["C:\\team20project\\frontend\\src\\containers\\TableSample.js"],"names":["React","render","_","makeData","ReactTable","rawData","requestData","pageSize","page","sorted","filtered","Promise","resolve","reject","filteredData","length","reduce","filteredSoFar","nextFilter","filter","row","id","includes","value","sortedData","orderBy","map","sort","undefined","Infinity","toLowerCase","d","desc","res","rows","slice","pages","Math","ceil","setTimeout","TableSample","Component","constructor","state","data","loading","fetchData","bind","instance","setState","then","console","log","Header","accessor"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport _ from \"lodash\";\r\nimport { makeData } from \"./Utils.js\";\r\n\r\n// Import React Table\r\nimport ReactTable from \"react-table\";\r\nimport \"react-table/react-table.css\";\r\n\r\nconst rawData = makeData();\r\n\r\nconst requestData = (pageSize, page, sorted, filtered) => {\r\n  return new Promise((resolve, reject) => {\r\n    // You can retrieve your data however you want, in this case, we will just use some local data.\r\n    let filteredData = rawData;\r\n\r\n    // You can use the filters in your request, but you are responsible for applying them.\r\n    if (filtered.length) {\r\n      filteredData = filtered.reduce((filteredSoFar, nextFilter) => {\r\n        return filteredSoFar.filter(row => {\r\n          return (row[nextFilter.id] + \"\").includes(nextFilter.value);\r\n        });\r\n      }, filteredData);\r\n    }\r\n    // You can also use the sorting in your request, but again, you are responsible for applying it.\r\n    const sortedData = _.orderBy(\r\n      filteredData,\r\n      sorted.map(sort => {\r\n        return row => {\r\n          if (row[sort.id] === null || row[sort.id] === undefined) {\r\n            return -Infinity;\r\n          }\r\n          return typeof row[sort.id] === \"string\"\r\n            ? row[sort.id].toLowerCase()\r\n            : row[sort.id];\r\n        };\r\n      }),\r\n      sorted.map(d => (d.desc ? \"desc\" : \"asc\"))\r\n    );\r\n\r\n    // You must return an object containing the rows of the current page, and optionally the total pages number.\r\n    const res = {\r\n      rows: filteredData.slice(pageSize * page, pageSize * page + pageSize),\r\n      pages: Math.ceil(filteredData.length / pageSize)\r\n    };\r\n\r\n    // Here we'll simulate a server response with 500ms of delay.\r\n    setTimeout(() => resolve(res), 500);\r\n  });\r\n};\r\n\r\nexport default class TableSample extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      data: [],\r\n      pages: null,\r\n      loading: true\r\n    };\r\n    this.fetchData = this.fetchData.bind(this);\r\n  }\r\n  fetchData(state, instance) {\r\n    // Whenever the table model changes, or the user sorts or changes pages, this method gets called and passed the current table model.\r\n    // You can set the `loading` prop of the table to true to use the built-in one or show you're own loading bar if you want.\r\n    this.setState({ loading: true });\r\n    // Request the data however you want.  Here, we'll use our mocked service we created earlier\r\n    requestData(\r\n      state.pageSize,\r\n      state.page,\r\n      state.sorted,\r\n      state.filtered\r\n    ).then(res => {\r\n        console.log(res);\r\n      // Now just get the rows of data to your React Table (and update anything else like total pages or loading)\r\n      this.setState({\r\n        data: res.rows,\r\n        pages: res.pages,\r\n        loading: false\r\n      });\r\n    });\r\n  }\r\n  render() {\r\n    const { data, pages, loading } = this.state;\r\n    return (\r\n      <div>\r\n        <ReactTable\r\n          columns={[\r\n            {\r\n              Header: \"First Name\",\r\n              accessor: \"firstName\"\r\n            },\r\n            {\r\n              Header: \"Last Name\",\r\n              accessor: \"lastName\"\r\n            },\r\n            {\r\n              Header: \"Age\",\r\n              accessor: \"age\"\r\n            }\r\n          ]}\r\n          manual // Forces table not to paginate or sort automatically, so we can handle it server-side\r\n          data={data}\r\n          pages={pages} // Display the total number of pages\r\n          loading={loading} // Display the loading overlay when we need it\r\n          onFetchData={this.fetchData} // Request new data when things change\r\n          filterable\r\n          defaultPageSize={10}\r\n          className=\"-striped -highlight\"\r\n        />\r\n        <br />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// render(<TableSample />, document.getElementById(\"root\"));\r\n"]},"metadata":{},"sourceType":"module"}