{"ast":null,"code":"import _slicedToArray from \"C:\\\\team20project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\team20project\\\\frontend\\\\src\\\\containers\\\\GetData.js\";\nimport React, { useState } from 'react';\nimport { useObservable } from 'rxjs-hooks';\nimport { Observable } from 'rxjs';\nimport { map, withLatestFrom, filter } from 'rxjs/operators';\nimport { Table, Input, Button } from 'reactstrap'; // import { ReactTable } from 'react-table';\n\nimport \"./GetData.css\";\nconst url = \"http://localhost:8080/streamTime/sse\";\nconst source = new EventSource(url);\nconst stringObservable = Observable.create(observer => {\n  source.addEventListener('message', messageEvent => {\n    // console.log(messageEvent);\n    observer.next(messageEvent.data);\n  }, false);\n});\n\nfunction GetData() {\n  let streamingStatus = true;\n  const myTable = \"myTable\";\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        stringArray = _useState2[0],\n        setStringArray = _useState2[1];\n\n  useObservable(state => stringObservable.pipe(withLatestFrom(state), map(([state]) => {\n    let updatedStringArray = stringArray;\n    updatedStringArray.unshift(state);\n\n    if (updatedStringArray.length >= 50) {\n      updatedStringArray.pop();\n    }\n\n    setStringArray(updatedStringArray);\n    return state;\n  })));\n  const columns = [{\n    Header: 'Id',\n    accessor: 'id' // String-based value accessors!\n\n  }, {\n    Header: 'Clock',\n    accessor: 'clock'\n  }];\n\n  const stopStreaming = event => {\n    streamingStatus = false;\n    console.log('Connection closed');\n    source.close();\n  };\n\n  const filterFn = event => {\n    // Declare variables \n    var input, filter, table, tr, td, i, txtValue;\n    input = document.getElementById(\"myFilter\");\n    filter = input.value.toUpperCase();\n    table = document.getElementById(\"myTable\");\n    tr = table.getElementsByTagName(\"tr\"); // Loop through all table rows, and hide those who don't match the search query\n\n    for (i = 0; i < tr.length; i++) {\n      td = tr[i].getElementsByTagName(\"td\")[0];\n      console.log(td);\n\n      if (td) {\n        txtValue = td.textContent || td.innerText;\n\n        if (txtValue.toUpperCase().indexOf(filter) > -1) {\n          tr[i].style.display = \"\";\n        } else {\n          tr[i].style.display = \"none\";\n        }\n      }\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Input, {\n    type: \"text\",\n    id: \"myFilter\",\n    onKeyPress: filterFn,\n    placeholder: \"Filter for Instrument here...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(Table, {\n    responsive: true,\n    id: myTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"#\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"name\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"password\"))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, stringArray.map((message, index) => {\n    message = message.replace(/'/g, '\"');\n    console.log(\"after \" + message);\n    message = JSON.parse(message);\n    console.log(message); // console.log(message.id)\n    // console.log(jsonMessgage.id + ' ' + jsonMessgage.name + ' ' + jsonMessgage.password)\n\n    return React.createElement(\"tr\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, index), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, message.name), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, message.password));\n  }))), React.createElement(Button, {\n    onClick: stopStreaming,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"Stop\"));\n}\n\nexport default GetData;","map":{"version":3,"sources":["C:\\team20project\\frontend\\src\\containers\\GetData.js"],"names":["React","useState","useObservable","Observable","map","withLatestFrom","filter","Table","Input","Button","url","source","EventSource","stringObservable","create","observer","addEventListener","messageEvent","next","data","GetData","streamingStatus","myTable","stringArray","setStringArray","state","pipe","updatedStringArray","unshift","length","pop","columns","Header","accessor","stopStreaming","event","console","log","close","filterFn","input","table","tr","td","i","txtValue","document","getElementById","value","toUpperCase","getElementsByTagName","textContent","innerText","indexOf","style","display","message","index","replace","JSON","parse","name","password"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useObservable } from 'rxjs-hooks';\r\nimport { Observable } from 'rxjs';\r\nimport { map, withLatestFrom, filter } from 'rxjs/operators';\r\nimport { Table, Input, Button } from 'reactstrap';\r\n// import { ReactTable } from 'react-table';\r\nimport \"./GetData.css\";\r\n\r\nconst url = \"http://localhost:8080/streamTime/sse\";\r\nconst source = new EventSource(url);\r\nconst stringObservable = Observable.create(observer => {\r\n    source.addEventListener('message', (messageEvent) => {\r\n        // console.log(messageEvent);\r\n        observer.next(messageEvent.data);\r\n    }, false);\r\n});\r\n\r\nfunction GetData() {\r\n    let streamingStatus = true;\r\n    const myTable = \"myTable\";\r\n\r\n    const [stringArray, setStringArray] = useState([]);\r\n\r\n    useObservable(\r\n        state =>\r\n            stringObservable.pipe(\r\n                withLatestFrom(state),\r\n                map(([state]) => {\r\n                    let updatedStringArray = stringArray;\r\n                    updatedStringArray.unshift(state);\r\n                    if (updatedStringArray.length >= 50) {\r\n                        updatedStringArray.pop();\r\n                    }\r\n                    setStringArray(updatedStringArray);\r\n                    return state;\r\n                })\r\n            )\r\n    );\r\n\r\n    const columns = [{\r\n        Header: 'Id',\r\n        accessor: 'id' // String-based value accessors!\r\n    }, {\r\n        Header: 'Clock',\r\n        accessor: 'clock'\r\n    }]\r\n\r\n    const stopStreaming = event => {\r\n        streamingStatus = false;\r\n        console.log('Connection closed');\r\n        source.close();\r\n    }\r\n\r\n    const filterFn = event => {\r\n        // Declare variables \r\n        var input, filter, table, tr, td, i, txtValue;\r\n        input = document.getElementById(\"myFilter\");\r\n        filter = input.value.toUpperCase();\r\n        table = document.getElementById(\"myTable\");\r\n        tr = table.getElementsByTagName(\"tr\");\r\n      \r\n        // Loop through all table rows, and hide those who don't match the search query\r\n        for (i = 0; i < tr.length; i++) {\r\n          td = tr[i].getElementsByTagName(\"td\")[0];\r\n          console.log(td);\r\n          if (td) {\r\n            txtValue = td.textContent || td.innerText;\r\n            if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n              tr[i].style.display = \"\";\r\n            } else {\r\n              tr[i].style.display = \"none\";\r\n            }\r\n          } \r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Input type=\"text\" id=\"myFilter\" onKeyPress={filterFn} placeholder=\"Filter for Instrument here...\"></Input>\r\n            <Table responsive id={myTable}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>#</th>\r\n                        <th>name</th>\r\n                        <th>password</th>\r\n                        {/* <th>instrumentName</th>\r\n                        <th>cpty</th>\r\n                        <th>price</th>\r\n                        <th>type</th>\r\n                        <th>quantity</th>\r\n                        <th>time</th> */}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        stringArray.map((message, index) => {\r\n                            message = message.replace(/'/g, '\"')\r\n                            console.log(\"after \" + message)\r\n                            message = JSON.parse(message)\r\n                            console.log(message)\r\n                            // console.log(message.id)\r\n                            // console.log(jsonMessgage.id + ' ' + jsonMessgage.name + ' ' + jsonMessgage.password)\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <td>{index}</td>\r\n                                    <td>{message.name}</td>\r\n                                    <td>{message.password}</td>\r\n                                    {/* <td>{instrumentName}</td>\r\n                                <td>{cpty}</td>\r\n                                <td>{price}</td>\r\n                                <td>{type}</td>\r\n                                <td>{quantity}</td>\r\n                                <td>{time}</td> */}\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </Table>\r\n            <Button onClick={stopStreaming}>Stop</Button>\r\n            {/* {stringArray[0]} */}\r\n            {/* {stringArray ? stringArray.map((message, index) => <p key={index}>{message}</p>) : <p>Loading...</p>} */}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GetData;\r\n"]},"metadata":{},"sourceType":"module"}