{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { useEffect, useState, useCallback } from 'react';\nimport { BehaviorSubject, Subject } from 'rxjs';\nexport function useEventCallback(callback, initialState, inputs) {\n  var initialValue = typeof initialState !== 'undefined' ? initialState : null;\n  var inputSubject$ = new BehaviorSubject(typeof inputs === 'undefined' ? null : inputs);\n  var stateSubject$ = new BehaviorSubject(initialValue);\n\n  var _a = tslib_1.__read(useState(initialValue), 2),\n      state = _a[0],\n      setState = _a[1];\n\n  var _b = tslib_1.__read(useState(new Subject()), 1),\n      event$ = _b[0];\n\n  function eventCallback(e) {\n    return event$.next(e);\n  }\n\n  var returnedCallback = useCallback(eventCallback, []);\n\n  var _c = tslib_1.__read(useState(stateSubject$), 1),\n      state$ = _c[0];\n\n  var _d = tslib_1.__read(useState(inputSubject$), 1),\n      inputs$ = _d[0];\n\n  useEffect(function () {\n    inputs$.next(inputs);\n  }, inputs || []);\n  useEffect(function () {\n    setState(initialValue);\n    var value$;\n\n    if (!inputs) {\n      value$ = callback(event$, state$);\n    } else {\n      value$ = callback(event$, inputs$, state$);\n    }\n\n    var subscription = value$.subscribe(function (value) {\n      state$.next(value);\n      setState(value);\n    });\n    return function () {\n      subscription.unsubscribe();\n      state$.complete();\n      inputs$.complete();\n      event$.complete();\n    };\n  }, []); // immutable forever\n\n  return [returnedCallback, state];\n}","map":null,"metadata":{},"sourceType":"module"}