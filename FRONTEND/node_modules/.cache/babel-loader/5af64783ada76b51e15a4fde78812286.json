{"ast":null,"code":"import _slicedToArray from \"C:\\\\team20project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\team20project\\\\frontend\\\\src\\\\containers\\\\TableData.js\";\nimport React, { useState } from 'react';\nimport { useObservable } from 'rxjs-hooks';\nimport { Observable } from 'rxjs';\nimport { map, withLatestFrom, filter } from 'rxjs/operators';\nimport { Table, Input, Button } from 'reactstrap'; // import { ReactTable } from 'react-table';\n\nimport \"./TableData.css\";\nconst url = \"http://localhost:8083/streamTime/sse\";\nconst source = new EventSource(url);\nconst stringObservable = Observable.create(observer => {\n  source.addEventListener('message', messageEvent => {\n    // console.log(messageEvent);\n    observer.next(messageEvent.data);\n  }, false);\n});\n\nfunction TableData() {\n  const myTable = \"myTable\";\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        stringArray = _useState2[0],\n        setStringArray = _useState2[1];\n\n  const refresh = event => {\n    window.location.reload();\n  };\n\n  useObservable(state => stringObservable.pipe(withLatestFrom(state), map(([state]) => {\n    let updatedStringArray = stringArray;\n    updatedStringArray.unshift(state);\n\n    if (updatedStringArray.length >= 50) {\n      updatedStringArray.pop();\n    }\n\n    setStringArray(updatedStringArray);\n    return state;\n  })));\n\n  const stopStreaming = event => {\n    console.log('Connection closed');\n    source.close();\n  };\n\n  const filterFn = event => {\n    // Declare variables \n    var input, filter, table, tr, td, i, txtValue;\n    input = document.getElementById(\"myFilter\");\n    filter = input.value.toUpperCase();\n    table = document.getElementById(\"myTable\");\n    tr = table.getElementsByTagName(\"tr\");\n\n    if (filter) {\n      // Loop through all table rows, and hide those who don't match the search query\n      for (i = 1; i < tr.length; i++) {\n        td = tr[i].getElementsByTagName(\"td\")[1];\n\n        if (td) {\n          txtValue = td.textContent || td.innerText; // if (txtValue.toUpperCase().indexOf(filter) > -1) {\n\n          if (txtValue.toUpperCase() === filter) {\n            tr[i].style.display = \"\";\n          } else {\n            tr[i].style.display = \"none\";\n          }\n        }\n      }\n    } else {\n      for (i = 1; i < tr.length; i++) {\n        tr[i].style.display = \"\";\n      }\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Input, {\n    type: \"text\",\n    id: \"myFilter\",\n    onKeyPress: filterFn,\n    placeholder: \"Filter for Instrument here...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    id: \"table-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"table-scroll\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(Table, {\n    responsive: true,\n    id: myTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"#\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"instrumentName\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"cpty\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"price\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"type\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"quantity\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"time\"))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, stringArray.map((message, index) => {\n    message = message.replace(/'/g, '\"');\n    message = JSON.parse(message);\n    return React.createElement(\"tr\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, index), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, message.instrumentName), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, message.cpty), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, message.price), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, message.type), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, message.quantity), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, message.time));\n  }))))), React.createElement(Button, {\n    onClick: stopStreaming,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"Stop\"), React.createElement(Button, {\n    onClick: refresh,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"Refresh\"));\n}\n\nexport default TableData;","map":{"version":3,"sources":["C:\\team20project\\frontend\\src\\containers\\TableData.js"],"names":["React","useState","useObservable","Observable","map","withLatestFrom","filter","Table","Input","Button","url","source","EventSource","stringObservable","create","observer","addEventListener","messageEvent","next","data","TableData","myTable","stringArray","setStringArray","refresh","event","window","location","reload","state","pipe","updatedStringArray","unshift","length","pop","stopStreaming","console","log","close","filterFn","input","table","tr","td","i","txtValue","document","getElementById","value","toUpperCase","getElementsByTagName","textContent","innerText","style","display","message","index","replace","JSON","parse","instrumentName","cpty","price","type","quantity","time"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useObservable } from 'rxjs-hooks';\r\nimport { Observable } from 'rxjs';\r\nimport { map, withLatestFrom, filter } from 'rxjs/operators';\r\nimport { Table, Input, Button } from 'reactstrap';\r\n// import { ReactTable } from 'react-table';\r\nimport \"./TableData.css\";\r\n\r\nconst url = \"http://localhost:8083/streamTime/sse\";\r\n    const source = new EventSource(url);\r\n    const stringObservable = Observable.create(observer => {\r\n        source.addEventListener('message', (messageEvent) => {\r\n            // console.log(messageEvent);\r\n            observer.next(messageEvent.data);\r\n        }, false);\r\n    });\r\n    \r\nfunction TableData() {\r\n    const myTable = \"myTable\";\r\n\r\n    const [stringArray, setStringArray] = useState([]);\r\n    const refresh = event => {\r\n        window.location.reload();\r\n    }\r\n\r\n    useObservable(\r\n        state =>\r\n            stringObservable.pipe(\r\n                withLatestFrom(state),\r\n                map(([state]) => {\r\n                    let updatedStringArray = stringArray;\r\n                    updatedStringArray.unshift(state);\r\n                    if (updatedStringArray.length >= 50) {\r\n                        updatedStringArray.pop();\r\n                    }\r\n                    setStringArray(updatedStringArray);\r\n                    return state;\r\n                })\r\n            )\r\n    );\r\n\r\n    const stopStreaming = event => {\r\n        console.log('Connection closed');\r\n        source.close();\r\n    }\r\n\r\n    const filterFn = event => {\r\n        // Declare variables \r\n        var input, filter, table, tr, td, i, txtValue;\r\n        input = document.getElementById(\"myFilter\");\r\n        filter = input.value.toUpperCase();\r\n        table = document.getElementById(\"myTable\");\r\n        tr = table.getElementsByTagName(\"tr\");\r\n\r\n        if (filter) {\r\n            // Loop through all table rows, and hide those who don't match the search query\r\n            for (i = 1; i < tr.length; i++) {\r\n                td = tr[i].getElementsByTagName(\"td\")[1];\r\n                if (td) {\r\n                    txtValue = td.textContent || td.innerText;\r\n                    // if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                    if (txtValue.toUpperCase() === filter) {\r\n                        tr[i].style.display = \"\";\r\n                    } else {\r\n                        tr[i].style.display = \"none\";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (i = 1; i < tr.length; i++) {\r\n                    tr[i].style.display = \"\";\r\n                }\r\n            }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Input type=\"text\" id=\"myFilter\" onKeyPress={filterFn} placeholder=\"Filter for Instrument here...\"></Input>\r\n            <div id=\"table-wrapper\">\r\n            <div id=\"table-scroll\">\r\n            <Table responsive id={myTable}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>#</th>\r\n                        <th>instrumentName</th>\r\n                        <th>cpty</th>\r\n                        <th>price</th>\r\n                        <th>type</th>\r\n                        <th>quantity</th>\r\n                        <th>time</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        stringArray.map((message, index) => {\r\n                            message = message.replace(/'/g, '\"')\r\n                            message = JSON.parse(message)\r\n                            return (\r\n                                <tr key={index}>\r\n                                <td>{index}</td>\r\n                                <td>{message.instrumentName}</td>\r\n                                <td>{message.cpty}</td>\r\n                                <td>{message.price}</td>\r\n                                <td>{message.type}</td>\r\n                                <td>{message.quantity}</td>\r\n                                <td>{message.time}</td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </Table>\r\n            </div>\r\n            </div>\r\n            <Button onClick={stopStreaming}>Stop</Button>\r\n            <Button onClick={refresh}>Refresh</Button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TableData;\r\n"]},"metadata":{},"sourceType":"module"}